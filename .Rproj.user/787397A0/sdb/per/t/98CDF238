{
    "collab_server" : "",
    "contents" : "#' Extract measurements for syllables or pulses.\n#' \n#' Exacts the start, end, max, min and mean applitute for each syllable/puls.\n#'\n#' @param song A loaded .wav file for extracting the dominant frequency (see \n#'   \\code{\\link{loadSongfile}}). \n#' @param envFine A sound envelope as a vector of numbers.\n#' @param Cutoffs A \\code{data.frame} containing the strophe cutoff locations \n#'   as returned by \\code{\\link{identifyStrophes}}.\n#' @param type A character strong with two possible values. Used to determine \n#'   if \\code{Cutoffs} refers to syllable or puls cutoffs.\n#' @param AbsThresh Absolute silence threshold\n#' @param RelThresh Relative silence threshold (as fraction of maximum).\n#' @param f The sampling frequency.\n#' @param wlFine The window size for the (finest) sound evelope.\n#' @param ovlpFine The overalp window size for the (finest) sound evelope as \n#'   percentage (i.e, >=0 amd <100).\n#' @param wlFreq Window size for extracting the dominant frequncy.\n#' @param ovlpFreq The overlap in window size for extracting the dominant \n#'   frequency.\n#' @param minAmpFreq Minimum amplitute in window for scoring the dominant \n#'   frequency.\n#' \n#' @return \n#' Returns a \\code{data.frame}, which is \\code{Cutoffs} augmented with five \n#' columns of measurements.\n#' \n#' @author Holger Schielzeth  (holger.schielzeth@@uni-bielefeld.de).\n#' \n#' @seealso \n#' \\code{\\link{loadSongfile}}, \\code{\\link{curateStrophes}}, \n#' \\code{\\link{identifyStrophes}}, \\code{\\link{identifySyllables}}, \n#' \\code{\\link{measureSyllables}}, \\code{\\link{identifyPulses}}, \n#' \\code{\\link{curateSyllables}}.\n#' \n#' @examples   \n#'\n#' \\dontrun{\n#' \n#' mysound = filePreparation(\"myfile.wav\", \"C://mypath//\", highpassfilter=1001, select=c(0.5,2))\n#' myenv = plotEnvolopes(mysound, \"myfile.wav\", \"c://mystropath//\", padding = 300)\n#' mystro = plotStrophes(myenv$envFine, \"myfile.wav\", \"C://mypath//\", measure=TRUE)\n#' }\n#' \n#' @export\n\nmeasureAnything <- function(song, envFine, Cutoffs, type=c(\"Syll\", \"Puls\"), f=44100, wlFine=44, ovlpFine=50, wlFreq=441, ovlpFreq=75, minAmpFreq=0.3, AbsThresh=16, RelThresh=0.2) {  \n  ncolumns = ncol(Cutoffs)\n  res = cbind(Cutoffs, begAmp=NA, endAmp=NA, minAmp=NA, maxAmp=NA, avgAmp=NA, locMaxSamp=NA, \n              SilenceBeginProp=NA, SilenceEndProp=NA, SilenceTotalProp=NA,\n              SilenceBeginSec=NA, SilenceEndSec=NA, SilenceTotalSec=NA,\n              syllPauseRatio=NA)\n  domfreq = seewave::dfreq(song, f = f, wl = wlFreq, ovlp = ovlpFreq, \n                           clip = minAmpFreq, plot = FALSE, col = \"red\", pch = 19, \n                           cex = 1.5)\n  domfreq = domfreq[, 2]\n  env2freqConversionFactor =  ( f / (wlFreq*(1-ovlpFreq/100))) / ( f / (wlFine*(1-ovlpFine/100)))\n  for(j in 1:nrow(Cutoffs)) {\n    if(type==\"Syll\") {\n      beg = Cutoffs$StroWindOffSamp[j] + Cutoffs$SyllBegSamp[j]\n      end = Cutoffs$StroWindOffSamp[j] + Cutoffs$SyllEndSamp[j]\n    }\n    if(type==\"Puls\") {\n      beg = Cutoffs$StroWindOffSamp[j] + Cutoffs$PulsBegSamp[j]\n      end = Cutoffs$StroWindOffSamp[j] + Cutoffs$PulsEndSamp[j]\n    }\n    envWindow = envFine[beg:end]\n    res[j,ncolumns+1:6] = c(envFine[beg], envFine[end], min(envWindow), max(envWindow), mean(envWindow), round(mean(beg - 1 + which(envWindow==max(envWindow))),0))\n    silenceSamp = as.numeric(envWindow > AbsThresh & envWindow > max(AbsThresh)*RelThresh)\n    res$SilenceBeginProp[j] = mean(cumsum(silenceSamp)==0)\n    res$SilenceEndProp[j]   = mean(cumsum(rev(silenceSamp))==0)\n    res$SilenceTotalProp[j] = mean(silenceSamp==0)\n    res$SilenceBeginSec[j]  = sum(cumsum(silenceSamp)==0) / ( f / (wlFine*(1-ovlpFine/100)))\n    res$SilenceEndSec[j]    = sum(cumsum(rev(silenceSamp))==0) / ( f / (wlFine*(1-ovlpFine/100)))\n    res$SilenceTotalSec[j]  = sum(silenceSamp==0) / ( f / (wlFine*(1-ovlpFine/100)))\n    res$syllPauseRatio[j]   = (length(silenceSamp) - sum(cumsum(rev(silenceSamp))==0)) / sum(cumsum(rev(silenceSamp))==0)\n    res$DomFreq [j]         = mean(domfreq[unique(round(beg:end*env2freqConversionFactor,0))], na.rm=TRUE)\n  }  \n  res$onsetAccentuation = res$maxAmp - res$begAmp \n  res$offsetLevel = res$avgAmp - res$endAmp \n  \n  \n  # Return values\n\treturn(res)\t\n}",
    "created" : 1500914082745.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3331583466",
    "id" : "98CDF238",
    "lastKnownWriteTime" : 1500914108,
    "last_content_update" : 1500914108179,
    "path" : "~/A_Projects/Gomphocerus/SongAnalysis/GrassSongAnalysis/R/measureAnything.R",
    "project_path" : "R/measureAnything.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}