{
    "collab_server" : "",
    "contents" : "#' Function for automatically fixing detected strophe cutoffs.\n#'\n#' Temp.... \n#'\n#' @param envFine Sound envelope (typically at finest resolution, required).\n#' @param wavfile Name of wavfile (required).\n#' @param stropath Path of the strophe files (optional, working directory if \n#'   missing).\n#' @param f Sampling rate of .wav file. Requrired for conversion of sampling \n#'   units to seconds.\n#' @param wl Window width used when calculating the sound evolope. Requrired \n#'   for conversion of sampling units to seconds.\n#' @param ovlp Overlap of the windows (expressed as percentages, i.e. >=0 and \n#'   <100) used when calculating the sound evolope. Requrired for conversion \n#'   of sampling units to seconds.\n#' @param StroThreshExceedWW The number of samples that is inspected for the \n#'   identification of strophe beginning and ends.\n#' @param StroThreshNeeded The number of samples within the window determined \n#'   by \\code{StroThreshExceedWW} that have to exceed the threshold determined \n#'   by \\code{stroAmpThresh} in order to qualify as a sound.\n#' @param padding Boolean or number. If FALSE or 0, no padding will be applied. \n#'   If a number >0, padding at the beginning and end will be applied with \n#'   padding interpreted as the number of samples. If TRUE, padding at the \n#'   beginning and end will be applied with the number of samples determined by \n#'   the \\code{StroThreshExceedWW - StroThreshNeeded + 1} (recommended).\n#' @param rollmeanStroWW Vector of 2 (preferentially odd) numbers. The \n#'   rolling mean window width for determining the intermediate an coarse \n#'   envolopes from the finest resultion envolope determined by \\code{wl} and \n#'   \\code{ovlp}. The code works more accurate for odd numbers!\n#' @param MinStroDur A minimum duration for potential strophes to be analyzed \n#'   (in seconds).\n#' @param stroCutoffs (Optional) \\code{data.frame} with strophe cutoffs.\n#' @param confirmRevised Boolean. Whether or not the revised plot should be \n#'   shown on screen.\n#' @param replotToFile Boolean. Whether or not the plot should be written to file.\n#' @param bmpwidth Width of the jpg image (in pixels). Applies only to plot \n#'   written to file.\n#' @param bmpheight Height of the jpg image (in pixels).\n#' @param closeAllWindowsOnStart Boolean. Whether or not plotting windows should be\n#'   closed at the start.\n#' @param manualEdit Boolean. Whether or not manual edits should be applied. Otherwise\n#'   NAs in StroCutoffs are simply updated (and Stroph numbers reordered!).\n#' @param forceStartAtZero Boolean. Whether predictated starting times in the padding \n#'   area should be forced to start at point zero of the actual recording. \n#' @param ... Addional parameters handed over to \\code{\\link{identifyStrophes}} \n#'   for plotting.\n#' \n#' @return \n#' Returns a \\code{data.frame} of strophe cutoffs \n#' (\\code{\\link{identifyStrophes}} for details).\n#' \n#' @author Holger Schielzeth  (holger.schielzeth@@uni-bielefeld.de)\n#' \n#' @seealso \n#' \\code{\\link{loadSongfile}}, \\code{\\link{identifyStrophes}}, \n#' \\code{\\link{identifySyllables}}, \\code{\\link{measureSyllables}}, \n#' \\code{\\link{identifyPulses}}, \\code{\\link{curateSyllables}}\n#' \n#' @examples   \n#' \\dontrun{\n#' # No example yet.\n#' }\n#' \n#' @export\n\nfixStrophesPadding = function(envFine, wavfile, stropath, stroCutoffs=NULL, f=44100, wl=44, ovlp=50, padding=TRUE, \n                          rollmeanStroWW=c(11, 101), StroThreshExceedWW=0, StroThreshNeeded=0, stroAmpThresh=15, MinStroDur=0, \n                          confirmRevised = TRUE, replotToFile = TRUE, closeAllWindowsOnStart=TRUE, manualEdit = TRUE, \n                          bmpwidth=3200, bmpheight=600, forceStartAtZero = TRUE, ...) {\n  # Initial checks\n  if(is.logical(padding) && padding) padding = StroThreshExceedWW - StroThreshNeeded + 1\n  if(is.logical(padding) && padding ==FALSE || is.null(padding)) padding = 0\n  if(closeAllWindowsOnStart) replicate(length(dev.list()), dev.off())\n  \n  if(forceStartAtZero && any(stroCutoffs$StartSampWoutPad<0))  {\n    stroCutoffs$StartSampWithPad[stroCutoffs$StartSampWithPad<padding] = padding\n    #stroCutoffs$StroCounter      = 1:nrow(stroCutoffs)\n    stroCutoffs[, 4:8] = NA\n    stroCutoffs = recalcCutoffNAs(stroCutoffs, f = f, wl = wl, ovlp = ovlp, padding = padding)\n  }\n  write.table(stroCutoffs, file=paste0(stropath, unlist(strsplit(wavfile, split='.', fixed=TRUE))[1],\".txt\"), sep=\"\\t\", quote=FALSE, row.names=FALSE)\n  #stroCutoffs = read.table(paste0(stropath, unlist(strsplit(wavfile, split='.', fixed=TRUE))[1],\".txt\"), header=TRUE, sep=\"\\t\")\n  #if(any(is.na(stroCutoffs))) \n  #  stroCutoffs = recalcCutoffNAs(stroCutoffs,f=f, wl=wl, ovlp=ovlp, padding=padding, file=paste0(stropath, unlist(strsplit(wavfile, split='.', fixed=TRUE))[1],\".txt\"))\n  if(replotToFile) {\n    identifyStrophes(envFine, wavfile=wavfile, stropath=stropath, toFile=TRUE, \n                     wl=wl, ovlp=ovlp, padding=padding, MinStroDur=MinStroDur,\n                     StroThreshExceedWW=StroThreshExceedWW, StroThreshNeeded=StroThreshNeeded, stroAmpThresh=stroAmpThresh,\n                     stroCutoffs=stroCutoffs, rollmeanStroWW=rollmeanStroWW, writeRes=FALSE, bmpwidth=bmpwidth, bmpheight=bmpheight, ...)\n  }\n  if(confirmRevised) {\n    windows(30,7)\n    identifyStrophes(envFine, wavfile=wavfile, stropath=stropath, toFile=FALSE, \n                     wl=wl, ovlp=ovlp, padding=padding, MinStroDur=MinStroDur,\n                     StroThreshExceedWW=StroThreshExceedWW, StroThreshNeeded=StroThreshNeeded, stroAmpThresh=stroAmpThresh,\n                     stroCutoffs=stroCutoffs, rollmeanStroWW=rollmeanStroWW, writeRes=FALSE, ...)\n    print(\"Check revised plot and press RETURN when done...\")\n    scan()\n    dev.off()\n  }\n  return(stroCutoffs=stroCutoffs)\n}\n",
    "created" : 1499077919003.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "552097905",
    "id" : "25B785B",
    "lastKnownWriteTime" : 1499081166,
    "last_content_update" : 1499081166471,
    "path" : "~/A_Projects/Gomphocerus/SongAnalysis/GrassSongAnalysis/R/fixStrophesPadding.R",
    "project_path" : "R/fixStrophesPadding.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}