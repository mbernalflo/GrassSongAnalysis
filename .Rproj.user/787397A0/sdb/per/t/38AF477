{
    "collab_server" : "",
    "contents" : "#' Function for curating automatically detected syllable cutoffs.\n#' \n#' The function takes existing cutoffs (typically read from a textfile), plots \n#' the amplitude envelpe and allows interactive setting of additional as well \n#' as removal of cutoffs. The function will end with redrawing the .bmp file \n#' with the new cutoffs.\n#'\n#' @param envFine Sound envelope (typically at finest resolution, required).\n#' @param wavfile Name of wavfile (required).\n#' @param syllpath Path of the syllable files (optional, working directory if \n#'   missing).\n#' @param f Sampling rate of .wav file. Requrired for conversion of sampling \n#'   units to seconds.\n#' @param wl Window width used when calculating the sound evolope. Requrired \n#'   for conversion of sampling units to seconds.\n#' @param ovlp Overlap of the windows (expressed as percentages, i.e. >=0 \n#'   and <100) used when calculating the sound evolope. Requrired for \n#'   conversion of sampling units to seconds.\n#' @param minSyllDur Minimum duration for strophes to be considered valid.\n#' @param minSearchWindow Window size (in sampling units) used for scanning \n#'   for a local minimum near the new location.\n#' @param stroCutoffs (Optional) \\code{data.frame} with strophe cutoffs.\n#' @param syllCutoffs (Optional) \\code{data.frame} with sullable cutoffs.\n#' @param ... Addional parameters handed over to \n#'   \\code{\\link{identifySyllables}} for plotting.\n#' \n#' @return \n#' Returns a \\code{data.frame} of syllable cutoffs \n#' (\\code{\\link{identifySyllables}} for details).\n#' \n#' @author Holger Schielzeth  (holger.schielzeth@@uni-bielefeld.de)\n#' \n#' @seealso \n#' \\code{\\link{loadSongfile}}, \\code{\\link{identifyStrophes}}, \n#' \\code{\\link{identifySyllables}}, \\code{\\link{measureSyllables}}, \n#' \\code{\\link{identifyPulses}}, \\code{\\link{curateStrophes}}\n#' \n#' @examples   \n#' \\dontrun{\n#' # No example yet.\n#' }\n#' \n#' @export\n\ncurateSyllables = function(envFine, wavfile, syllpath, f=44100, wl=44, ovlp=50, minSyllDur=0, \n                           minSearchWindow = 31,\n                           stroCutoffs=NULL, syllCutoffs=NULL, ...) {\n  curCutoffs = sort(c(syllCutoffs$SyllBegSamp, syllCutoffs$SyllEndSamp[nrow(syllCutoffs)]))\n  zoom = NULL\n  identifySyllables(envFine, wavfile=wavfile, syllpath=syllpath, identify=FALSE, plot=TRUE, toFile=FALSE, \n                    f=f, wl=wl, ovlp=ovlp, minSyllDur=minSyllDur, mar=c(2,3,1,1), cex=1,\n                    stroCutoffs=stroCutoffs, syllCutoffs=syllCutoffs, \n                    xlimSyllPlot=zoom, xlimFullPlot=zoom, writeRes=FALSE, ...)      \n  repeat{\n    print(\"Do you want to zoom in [Z], zoom out [O], add cutoff points [A], remove cutoff points [R] or quit [Q]?\")\n    print(\"Waiting for input ...\")\n    answer = readline()\n    print(\"Input received.\")\n    if(answer==\"O\") {\n      print(\"Zoom out selected.\")\n      identifySyllables(envFine, wavfile=wavfile, syllpath=syllpath, identify=FALSE, plot=TRUE, toFile=FALSE, \n                        f=f, wl=wl, ovlp=ovlp, minSyllDur=minSyllDur, mar=c(2,3,1,1), cex=1,\n                        stroCutoffs=stroCutoffs, syllCutoffs=syllCutoffs, \n                        xlimSyllPlot=NULL, xlimFullPlot=NULL, writeRes=FALSE, ...)\n      zoom = c(0, length(envFine))\n    }\n    if(answer==\"Z\") {\n      print(\"Zoom in selected.\")\n      print(\"Mark two points in plot (last two will be used)\")\n      print(\"Waiting for input ...\")\n      zoom = locator()$x\n      print(\"Input received.\")\n      if(length(zoom)<2) warning(\"Two points have to be marked.\")     \n      if(length(zoom)>2) zoom = zoom[c(length(zoom)-1,length(zoom))]\n      identifySyllables(envFine, wavfile=wavfile, syllpath=syllpath, identify=FALSE, plot=TRUE, toFile=FALSE, \n                        f=f, wl=wl, ovlp=ovlp, minSyllDur=minSyllDur, mar=c(2,3,1,1), cex=1,\n                        stroCutoffs=stroCutoffs, syllCutoffs=syllCutoffs, \n                        xlimSyllPlot=zoom, xlimFullPlot=zoom, writeRes=FALSE, ...) \n    }\n    if(answer==\"A\") {\n      print(\"Adding cutoffs selected\")\n      print(\"Mark new cutoff points in plot\")\n      print(\"Waiting for input ...\")\n      newcutoff = round(locator()$x,0)\n      print(\"Input received.\")\n      newcutoffmin = newcutoff\n      seachWindowOneSide = (minSearchWindow-1)/2\n      for(i in 1:length(newcutoffmin)) {\n        print(newcutoffmin[i]+seachWindowOneSide*c(-1,1))\n        wind = envFine[newcutoffmin[i]+seachWindowOneSide*c(-1,1)]\n        newcutoffmin[i] = newcutoffmin[i]+which(wind==min(wind))[1]-seachWindowOneSide\n      }\n      newcutoff = data.frame(selected=newcutoff, localMin=newcutoffmin)\n      print(newcutoff)\n      curCutoffs = sort(c(curCutoffs, newcutoff$localMin))\n      syllCutoffs = curCutoffs\n      syllCutoffs = data.frame(SongFile=wavfile, StroCounter = stroCutoffs$StroCounter[1], StroWindOffSamp=stroCutoffs$StartSampWoutPad[1], SyllCounter=1:I(length(syllCutoffs)-1),  SyllCounterRev=rev(1:I(length(syllCutoffs)-1)), SyllPosProp=1:I(length(syllCutoffs)-1)/length(syllCutoffs), SyllBegSamp=syllCutoffs[-length(syllCutoffs)], SyllEndSamp=syllCutoffs[-1])\n      syllCutoffs$SyllDurationSamp = syllCutoffs$SyllEndSamp-syllCutoffs$SyllBegSamp\n      syllCutoffs$SyllDurationSec  = syllCutoffs$SyllDurationSamp / ( f / (wl*(1-ovlp/100)))    \n      syllCutoffs$SyllValid = as.numeric(syllCutoffs$SyllDurationSec >= minSyllDur)    \n      write.table(syllCutoffs, paste0(syllpath,unlist(strsplit(wavfile, split='.', fixed=TRUE))[1],\"_Strophe\", stroCutoffs$StroCounter[i], \"_Syllables.txt\"), sep=\",\", quote=FALSE, row.names=FALSE)\n      identifySyllables(envFine, wavfile=wavfile, syllpath=syllpath, identify=FALSE, plot=TRUE, toFile=FALSE, \n                        f=f, wl=wl, ovlp=ovlp, minSyllDur=minSyllDur, mar=c(2,3,1,1), cex=1,\n                        stroCutoffs=stroCutoffs, syllCutoffs=syllCutoffs, \n                        xlimSyllPlot=zoom, xlimFullPlot=zoom, writeRes=FALSE, ...)   \n    }\n    if(answer==\"R\") {\n      print(\"Remove cutoffs selected\")\n      points(curCutoffs, rep(100, length(curCutoffs)), col=\"red\", pch=19, cex=1.5)\n      print(\"Mark cutoff points to be deleted in plot (click on red dots)\")\n      print(\"Waiting for input ...\")\n      remcutoff = identify(curCutoffs, rep(100, length(curCutoffs)))\n      print(\"Input received.\")\n      print(remcutoff)\n      if(any(remcutoff)==1) {\n        if(any(remcutoff)!=1) {\n          remcutoff = remcutoff[-1*which(remcutoff==1)]\n          print(\"First and last cutoff points cannot be deleted.\")\n        }\n      }\n      if(any(remcutoff)==1) {\n        if(any(remcutoff)!=1) {\n          remcutoff = remcutoff[-1*which(remcutoff==1)]\n          print(\"First and last cutoff points cannot be deleted.\")\n        }\n      }\n      curCutoffs = curCutoffs[-remcutoff]\n      syllCutoffs = curCutoffs\n      syllCutoffs = data.frame(SongFile=wavfile, StroCounter = stroCutoffs$StroCounter[1], StroWindOffSamp=stroCutoffs$StartSampWoutPad[1], SyllCounter=1:I(length(syllCutoffs)-1),  SyllCounterRev=rev(1:I(length(syllCutoffs)-1)), SyllPosProp=1:I(length(syllCutoffs)-1)/length(syllCutoffs), SyllBegSamp=syllCutoffs[-length(syllCutoffs)], SyllEndSamp=syllCutoffs[-1])\n      syllCutoffs$SyllDurationSamp = syllCutoffs$SyllEndSamp-syllCutoffs$SyllBegSamp\n      syllCutoffs$SyllDurationSec  = syllCutoffs$SyllDurationSamp / ( f / (wl*(1-ovlp/100)))    \n      syllCutoffs$SyllValid = as.numeric(syllCutoffs$SyllDurationSec >= minSyllDur)    \n      write.table(syllCutoffs, paste0(syllpath,unlist(strsplit(wavfile, split='.', fixed=TRUE))[1],\"_Strophe\", stroCutoffs$StroCounter[i], \"_Syllables.txt\"), sep=\",\", quote=FALSE, row.names=FALSE)\n      identifySyllables(envFine, wavfile=wavfile, syllpath=syllpath, identify=FALSE, plot=TRUE, toFile=FALSE, \n                        f=f, wl=wl, ovlp=ovlp, minSyllDur=minSyllDur, mar=c(2,3,1,1), cex=1,\n                        stroCutoffs=stroCutoffs, syllCutoffs=syllCutoffs, \n                        xlimSyllPlot=zoom, xlimFullPlot=zoom, writeRes=FALSE, ...)   \n    }\n    if(answer==\"Q\") {\n      print(\"Quit selected\")\n      break \n    }\n  }\n  # Print to bmp file\n  identifySyllables(envFine, wavfile=wavfile, syllpath=syllpath, identify=FALSE, plot=TRUE, toFile=TRUE, \n                    f=f, wl=wl, ovlp=ovlp, minSyllDur=minSyllDur, mar=c(2,3,1,1), cex=1,\n                    stroCutoffs=stroCutoffs, syllCutoffs=syllCutoffs, \n                    xlimSyllPlot=NULL, xlimFullPlot=NULL, writeRes=FALSE, ...)\n  # Return\n  return(syllCutoffs=syllCutoffs)\n}",
    "created" : 1498752148830.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1462315674",
    "id" : "38AF477",
    "lastKnownWriteTime" : 1435830604,
    "last_content_update" : 1435830604,
    "path" : "~/A_Projects/Gomphocerus/SongAnalysis/GrassSongAnalysis/R/curateSyllables.R",
    "project_path" : "R/curateSyllables.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}