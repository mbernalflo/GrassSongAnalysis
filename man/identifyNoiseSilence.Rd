% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/identifyNoiseSilence.R
\name{identifyNoiseSilence}
\alias{identifyNoiseSilence}
\title{Identifies periods of noise and silence inside a strophe.}
\usage{
identifyNoiseSilence(
  envFine,
  wavfile,
  syllpath = "",
  identify = TRUE,
  plot = FALSE,
  f = 44100,
  toFile = TRUE,
  bmpwidth = 3200,
  bmpheight = 1200,
  rollmeanWW = 601,
  rollmeanWWdiff = 101,
  wl = 44,
  ovlp = 50,
  max_gap = 8,
  meanReduceFrac = 0.4,
  addThresh = 0,
  minSyllDur = 0.06,
  maxSyllDur = 1,
  stroCutoffs = NULL,
  syllCutoffs = NULL,
  mar = NULL,
  cex = 2,
  lwdSyllSep = 2,
  writeRes = TRUE,
  overwriteRes = FALSE,
  useResFile = TRUE
)
}
\arguments{
\item{envFine}{A sound envelope as a vector of numbers.}

\item{wavfile}{Name of wavfile (required).}

\item{syllpath}{Path to folder in which jpg files should be plotted 
(optional, working directory if missing). Directory will be created if 
it does not exist.}

\item{identify}{Boolean. Whether or not syllable boundaries should be identified automatically.}

\item{plot}{Boolean, whether or not a plot should be in created.}

\item{f}{Sampling rate (extracted from wavfile if NULL).}

\item{toFile}{Boolean, whether or not the plot should be in a .jpg file 
(if TRUE) or in a plotting window (if FALSE).}

\item{bmpwidth}{Width of the jpg image (in pixels).}

\item{bmpheight}{Height of the jpg image (in pixels).}

\item{rollmeanWW}{A number, (preferentially odd). The rolling mean window width for determining the coarse envelope from the finest resolution envelope determined by \code{wl} and \code{ovlp}. The code works more accurately for odd numbers!}

\item{rollmeanWWdiff}{A number (preferentially odd). The rolling mean window width for smoothing the difference between fine and coarse envelope (for syllable identification). The code works more accurate for odd numbers!}

\item{wl}{Window length for the (finest) sound envelope given as the 
number of sample points, At f=44100: 44 eq 1 ms (recommended), 441 eq 10 
ms, 4410 eq 100 ms.}

\item{ovlp}{overlap between two successive windows (in percent, i.e., 0).}

\item{max_gap}{Maximum amount of points below the lower threshold there can be in the smoothed out vector before a cut is made.}

\item{meanReduceFrac}{Number (range 0-1) giving the fractional reduce of the average threshold towards the mean for syllable identification.}

\item{addThresh}{parameter to slightly change the threshold that defines when a Noise section starts and ends.}

\item{minSyllDur}{Min syllable duration in seconds.}

\item{maxSyllDur}{Max syllable duration in seconds.}

\item{stroCutoffs}{A \code{data.frame} containing the strophe cutoff locations as returned by \code{identifyStrophes}.}

\item{syllCutoffs}{A \code{data.frame} containing the syllable cutoff locations (useful if they have been manually curated).}

\item{mar}{A vector of four numbers giving the margins of the plot.}

\item{cex}{Size of the syllable counter on the plot.}

\item{lwdSyllSep}{Line width of the syllable separator lines.}

\item{writeRes}{Boolean. Whether or not the strophe cutoffs should be 
written to file.}

\item{overwriteRes}{Boolean. This is just a safty catch. If  \code{write = TRUE}
and \code{overwriteRes = FALSE} the function will stop in order not to 
overwrite previous manual edits.}

\item{useResFile}{Boolean. A check is done, if a results file already exists and
the results of this file are used in \code{useResFile = TRUE}}
}
\value{
Returns a \code{data.frame}:
\describe{
\item{sysllCutoffs}{A \code{data.frame} of detected strophe cutoff points. 
  The elements are:
  \describe{
     \item{SyllCounter}{A counter for syllables within the strophe.}
     \item{noiseStartSamp}{The noise start as the sample in 
       \code{envFine} in the padded sequence.}
     \item{noiseEndSamp}{The noise end as the sample in \code{envFine} 
       in the padded sequence.}
     \item{noiseStartSec}{The noise start converted to seconds of the song 
       without padding.}
     \item{noiseEndSec}{The noise end converted to seconds of the song 
       without padding.}
     \item{noiseDurSec}{The noise duration in seconds.}
     \item{SyllValid}{Indicator if the strophe is valid (i.e., exceeds 
       \code{minStroDur}).}
     \item{silenceStartSamp}{The silence start as the sample in 
       \code{envFine} in the padded sequence.}
     \item{silenceEndSamp}{The silence end as the sample in \code{envFine} 
       in the padded sequence.}
     \item{silenceStartSec}{The silence start converted to seconds of the song.}
     \item{silenceEndSec}{The silence end converted to seconds of the song.}
     \item{silenceDur}{The silence duration in seconds.}
   }
  }
}
}
\description{
Identifies noise periods and silence periods using amplitude changes. Plots the stroph identified using \code{\link{identifyStrophes}} at the top and the difference between the fine and the coarse level at the bottom. It creates a \code{data.frame} with the starting and ending points of the noise and the silence, the duration of the noise and the silence, and the validity of the syllable.
}
\details{
The algorithm in brief:
\itemize{
 \item Creates a coarse envelope by calculating the rolling mean of \code{envFine} for windows of \code{rollmeanWW} width (for smoothing).  
 \item Calculate for each point the difference between the fine and the coarse envelope and smooth that vector too using the rolling mean again, this time using the \code{rollmeanWWdiff} parameter.
 \item Create a threshold that depends on the mean value of this last smoothed envelope to determine whether the \code{diffSyll} amplitude is high enough to indicate that a noise period is starting.
 \item Use \code{max_gap} to determine the maximum amount of points belowed the threshold that would be ignored inside a sequence.
 \item Do some plotting and packaging of the results.
}
}
\note{
If the syllable identification process returns no values there willl be no plot and a message will appear on the console.
}
\examples{
  

\dontrun{
syllpath <- "C:/mypath/"
wavfile <- "myfile.wav"

syllCutoffs <- identifyNoiseSilence(
envFine = envFine,
wavfile, 
plot=TRUE,
rollmeanWW=601,
rollmeanWWdiff=101,
max_gap=10,
meanReduceFrac=0.4,
minSyllDur=0.06,
maxSyllDur=1,
stroCutoffs=stroCutoffs
)

}

}
\seealso{
\code{\link{loadSongfile}}, \code{\link{curateStrophes}}, 
\code{\link{identifyStrophes}}, \code{\link{measureSyllables}}, 
\code{\link{identifyPulses}}, \code{\link{curateSyllables}}, \code{\link{mergePhrases}}, \code{\link{identifySyllables}}
}
\author{
Holger Schielzeth  (holger.schielzeth@uni-jena.de), Mar Bernal Flo (mar.bernal.flo@uni-jena.de)
}
